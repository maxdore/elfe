fof(ssurjective, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) => (! [Vg] : (! [VC] : ((function(Vg,VB,VC)) => ((surjective(Vf)) <=> (! [Vy] : ((in(Vy,VB)) => (! [Vx] : ((in(Vx,VA)) & (relapp(Vf,Vx,Vy))))))))))))))).
fof(sinjective, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) => ((injective(Vf)) <=> (! [Vx1] : (! [Vx2] : (! [Vy] : (((relapp(Vf,Vx1,Vy)) & (relapp(Vf,Vx2,Vy))) => (equal(Vx1,Vx2)))))))))))).
fof(s1, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) => (! [Vg] : (! [VC] : ((function(Vg,VB,VC)) => (! [Vc] : (! [Vd] : (! [Ve] : (((relapp(Vf,Vc,Ve)) & (relapp(Vf,Vd,Ve))) => (! [Vm] : ((relapp(composition(Vg,Vf),Vc,Vm)) & (relapp(composition(Vg,Vf),Vd,Vm)))))))))))))))).
fof(sfunctionClosure, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) => (! [Vx] : (! [Vy] : ((equal(Vx,Vy)) => (! [Vz] : ((relapp(Vf,Vx,Vz)) & (relapp(Vf,Vy,Vz)))))))))))).
fof(scomposition, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) => (! [Vg] : (! [VC] : ((function(Vg,VB,VC)) => (! [Vx] : (! [Vy] : (! [Vz] : ((((in(Vx,VA)) & (in(Vy,VB))) & (in(Vz,VC))) => ((function(composition(Vg,Vf),VA,VC)) & ((relapp(composition(Vg,Vf),Vx,Vz)) <=> ((relapp(Vf,Vx,Vy)) & (relapp(Vg,Vy,Vz))))))))))))))))).
fof(sfunction, axiom, (! [Vf] : (! [VA] : (! [VB] : ((function(Vf,VA,VB)) <=> (! [Vx] : ((in(Vx,VA)) => (! [Vy] : (((in(Vy,VB)) & (relapp(Vf,Vx,Vy))) & (! [Vy2] : ((in(Vy2,VB)) => ((equal(Vy,Vy2)) | (~(relapp(Vf,Vx,Vy2))))))))))))))).
fof(scompSet, axiom, (! [VA] : ((set(VA)) => (set(comp(VA)))))).
fof(scomp, axiom, (! [VA] : ((set(VA)) => (! [Vx] : ((element(Vx)) => ((in(Vx,comp(VA))) <=> (~(in(Vx,VA))))))))).
fof(sintersectionSet, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (set(intersection(VA,VB)))))))).
fof(sintersection, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (! [Vx] : ((element(Vx)) => ((in(Vx,intersection(VA,VB))) <=> ((in(Vx,VA)) & (in(Vx,VB))))))))))).
fof(sunionSet, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (set(union(VA,VB)))))))).
fof(sunion, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (! [Vx] : ((element(Vx)) => ((in(Vx,union(VA,VB))) <=> ((in(Vx,VA)) | (in(Vx,VB))))))))))).
fof(s0, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => ((equal(VA,VB)) <=> ((subset(VA,VB)) & (subset(VB,VA))))))))).
fof(ssubset, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (! [Vx] : ((element(Vx)) => ((subset(VA,VB)) <=> ((in(Vx,VA)) => (in(Vx,VB))))))))))).
fof(sequality, axiom, (! [VA] : ((set(VA)) => (! [VB] : ((set(VB)) => (! [Vx] : ((element(Vx)) => ((equal(VA,VB)) <=> ((in(Vx,VA)) <=> (in(Vx,VB))))))))))).
fof(sunequal, axiom, ((unequal(x,y)) <=> (~(equal(x,y))))).
fof(stransitive, axiom, (! [Vx] : (! [Vy] : (! [Vz] : (((equal(Vx,Vy)) & (equal(Vy,Vz))) => (equal(Vx,Vz))))))).
fof(ssymmetric, axiom, (! [Vx] : (! [Vy] : ((equal(Vx,Vy)) => (equal(Vy,Vx)))))).
fof(sreflexive, axiom, (! [Vx] : (equal(Vx,Vx)))).
fof(s11, axiom, (injective(composition(bg,bf)))).
fof(s3, axiom, ((function(bf,bA,bB)) & (function(bg,bB,bC)))).
fof(s4, axiom, ((relapp(composition(bg,bf),bx1,z)) & (relapp(composition(bg,bf),bx2,z)))).
fof(s6, axiom, ((relapp(bf,bx1,by)) & (relapp(bf,bx2,by)))).
fof(s7, conjecture, (equal(bx1,bx2))).
